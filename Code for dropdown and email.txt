import React, { useState, useEffect } from 'react';

const WebcastDetail = () => {
  const [webcastData, setWebcastData] = useState({
    title: '',
    speakerName: '',
    speakerImage: '',
    fields: [],
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('http://localhost:3000/WebcastAllDetail', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            IPClientCode: '10041',
            IPDeptID: '30',
          }),
        });

        if (!response.ok) {
          throw new Error('Failed to fetch data');
        }

        const data = await response.json();

        const title = data.events[0]?.Title || '';
        const speaker = data.speakerList[0] || {};
        const speakerName = speaker.SpkName || '';
        const speakerImage = speaker.SpkImage || '';
        const fields = data.fieldList || [];

        setWebcastData({
          title,
          speakerName,
          speakerImage,
          fields,
        });
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  const renderFormField = (field) => {
    switch (field.FieldType) {
      case 'text':
      case 'email':
        return (
          <div key={field.WcFid} className="form-floating">
            <input
              type={field.FieldType}
              placeholder={field.PlaceHolder}
              id={`floatingInput${field.WcFid}`}
              className="form-control"
              name={field.PlaceHolder}
              required={field.IsMandate === 'M'}
            />
            <label htmlFor={`floatingInput${field.WcFid}`}>{field.PlaceHolder}</label>
          </div>
        );
      case 'dropdown':
        return (
          <div key={field.WcFid} className="form-floating">
            <select
              id={`floatingInput${field.WcFid}`}
              className="form-select"
              name={field.PlaceHolder}
              required={field.IsMandate === 'M'}
            >
              {field.options.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            <label htmlFor={`floatingInput${field.WcFid}`}>{field.PlaceHolder}</label>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="row">
      {/* ... (unchanged code) */}
      <div className="colr col-md-5">
        <div className="Registration mx-auto">
          <div className="tab">
            <button className="tablinks active">Register</button>
          </div>

          <div id="Register" className="tabcontent">
            <form>
              {webcastData.fields.map((field) => renderFormField(field))}
              <div className="text-center">
                <button type="submit" className="reg" name="SUBMIT" value="SUBMIT">
                  SUBMIT
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WebcastDetail;
